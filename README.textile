h1. Vim

It is recommended that you use gVim in either Windows or Linux and MacVim for
Mac. Download from:

* (Windows) http://www.vim.org/download.php#pc (gvim73_46.exe)
* (Mac) https://github.com/b4winckler/macvim/downloads (snapshot-56)

h1. Bundled Plugins

* "Ack":http://www.vim.org/scripts/script.php?script_id=2572 - type :Ack [search pattern] to search your entire project
* "Align":http://www.vim.org/scripts/script.php?script_id=294 - align blocks of text using equal sign, make comment boxes and more
* "bufexplorer":http://www.vim.org/scripts/script.php?script_id=42 - manage your file buffers
* "Command-T":http://www.vim.org/scripts/script.php?script_id=3025 - the fastest and most intuitive way for opening files in your project
* "cucumber":http://www.vim.org/scripts/script.php?script_id=2973 - support for cucumber features such as syntax highlight, indentation, etc
* "endwise":http://www.vim.org/scripts/script.php?script_id=2386 - support to close Ruby blocks such as 'if', 'do' with 'end'
* "fugitive":http://www.vim.org/scripts/script.php?script_id=2975 - support for Git, adding convenient commands such as :Gstatus, :Gread, :Gmove
* "haml":http://www.vim.org/scripts/script.php?script_id=1773 - syntax highlight for HAML
* "html5.vim":https://github.com/othree/html5.vim - omnicomplete function and syntax for HTML5
* "markdown":http://www.vim.org/scripts/script.php?script_id=1242 - syntax highlight for Markdown
* "NERD_commenter":http://www.vim.org/scripts/script.php?script_id=1218 - support to comment lines of code
* "NERD_tree":http://www.vim.org/scripts/script.php?script_id=1658 - project pane that you can open with [leader] p
* "ragtag":http://www.vim.org/scripts/script.php?script_id=1896 - easier way to create tags for html, erb, etc
* "rails":http://www.vim.org/scripts/script.php?script_id=1567 - lot's of tools to make it easier to manage your Rails projects
* "snipmate":https://github.com/akitaonrails/snipmate.vim - support for textmate-like snippets for several languages
* "supertab":http://www.vim.org/scripts/script.php?script_id=1643 - pseudo auto-complete with tab
* "surround":http://www.vim.org/scripts/script.php?script_id=1697 - add, change, remove surrounding parentheses, brackets, quotes, etc
* "syntastic":http://www.vim.org/scripts/script.php?script_id=2736 - checks for syntax errors in many languages
* "textile":http://www.vim.org/scripts/script.php?script_id=2305 - syntax highlight for Textile
* "vim-coffee-script":https://github.com/kchmck/vim-coffee-script - syntax highlight for Coffee Script
* "vim-jade":https://github.com/statianzo/vim-jade - Vim syntax highlighting for the Jade templating engine
* "vim-jquery":https://github.com/itspriddle/vim-jquery - Vim syntax file to add some colorations for jQuery keywords and css selectors
* "vim-preview":http://www.vim.org/scripts/script.php?script_id=3344 - [leader] P previews Markdown, Rdoc, Textile, html. Requires Ruby and other gems.
* "vim-ruby-sinatra":https://github.com/hallison/vim-ruby-sinatra - syntax highlight for Sinatra
* "vim-ruby":https://github.com/vim-ruby/vim-ruby/wiki - syntax highlight, smart identation, auto-complete for Ruby
* "vim-textobj-rubyblock":http://vimcasts.org/blog/2010/12/a-text-object-for-ruby-blocks/ - smart block selection in Ruby code
* "vividchalk":http://www.vim.org/scripts/script.php?script_id=1891 - color scheme inspired by the classic Vibrant for Textmate
* "Zencoding":http://www.vim.org/scripts/script.php?script_id=2981 - powerful way for HTML abbreviations (learn here: http://code.google.com/p/zen-coding/). Type abbreviation and press Ctrl+Y+comma (c-y ,)

h1. Usage

Troubleshoot: Because of the large amount of submodules, if you ever have any
trouble after pulling from the repository, it will be easier to just back up
your old .vim folder and just git clone a new version.

Clone this repo into your home directory either as .vim (linux/mac) or
vimfiles (Windows). Such as:

<pre><code>
git clone git://github.com/akitaonrails/vimfiles.git ~/.vim
</pre></code>

Then 'cd' into the repo and run this to get the snippets submodule:

<pre><code>
git submodule update --init
</code></pre>

Now you should create a new <tt>.vimrc</tt> file in your home directory that
loads the pre-configured one that comes bundled in this package. You can do it
on Linux/Mac like this:

<pre><code>
echo "source ~/.vim/vimrc" > ~/.vimrc
</code></pre>

On Windows you should create a <tt>_vimrc</tt> (underline instead of dot) and add
the following line inside:

<pre><code>
source ~/vimfiles/vimrc
</code></pre>

This way you can override the default configuration by adding your own inside
this file.

You should also create a new <tt>.gvimrc</tt> file in your home directory. You can do
it on Linux/Mac like this:

<pre><code>
echo "source ~/.vim/gvimrc" > ~/.gvimrc
</code></pre>

On Windows you should create a <tt>_gvimrc</tt> (underline instead of dot) and add
the following line inside:

<pre><code>
source ~/vimfiles/gvimrc
</code></pre>

This way you can override the default GUI configuration by adding your own inside
this file.

h2. Help Tags

At first usage of vim, type ":" while in command mode and execute:

  call pathogen#helptags()

This will make the plugins documentations available upon :help

h2. Dependencies

You will need these dependencies figured out:

* Ruby (for the fuzzy finder plugin)
* Exuberant Ctags (http://ctags.sourceforge.net/)
* Ncurses-term (in Linux only)

In Ubuntu, for example, you will have to do:

<pre><code>
apt-get install exuberant-ctags ncurses-term
</code></pre>

In OS X, you can install ctags with homebrew

<pre><code>
brew install ctags
</code></pre>

On Windows you have to download Ctags and add ctags.exe in your PATH.

Mac OS X and most Linux distros come with Ruby already. If you're in Windows
look for Luis Lavena's latest Ruby Installer (http://rubyforge.org/projects/rubyinstaller/)

h1. IMPORTANT: Command-T

The latest version replaces the old Fuzzy Finder with a new one called
"Command-T" form wincent.com. I've replaced the old "Command-T" key
binding that used to open new tabs and assigned it to this new plugin
so it behaves the same as Textmate.

You may have problems in Mac/Linux because this plugin requires a native
extension, so you will have to do this:

<pre><code>
rvm use system # use this line if using rvm
cd ~/.vim/bundle/Command-T/ruby/command-t
ruby extconf.rb
make
</code></pre>

This means that you need to have your Ruby source files and GCC also
installed. A binary for Windows is already bundled so it should just
work. I've also included a binary compiled for Ruby Enterprise Edition,
but if you are using other Ruby distros, you will need to recompile.

There are binaries for Mac and Windows. The Mac version is compiled
against the default system Ruby for Mac OS X 10.6.5. The Windows version
is compiled against Ruby Installer 1.8.7-p330.

h2. Ubuntu 11.04 and/or Vim 7.3.35

Ubuntu 11.04 comes bundled with Vim 7.3.35, which has "flaky" Ruby support.
Even if you do everything right, you might see the following crashes when
trying to use Command-T:

<pre><code>
Vim: Caught deadly signal SEGV
Vim: Finished.

Segmentation fault
</code></pre>

If this happens to you, update Vim to 7.3.154:

<pre><code>
hg clone https://vim.googlecode.com/hg/ ~/vim
cd ~/vim
hg update -C v7-3-154
./configure --enable-rubyinterp
make
sudo make install
</code></pre>

More details can be found "here":http://kresimirbojcic.com/2011/05/14/installing-command-t-ubunutu-11.04-ruby-1.9.2.html

h2. Learn Vim

Visit the following sites to learn more about Vim:

* http://vimcasts.org

There are many sites teaching Vim, if you know of any other that are easy
to follow for newcomers, let me know.

h2. Credits

* Original project and most of the heavy lifting: @scrooloose
* All the cool plugins for Rails, Cucumber and more: @timpope
* Great Command-T plugin by: Wincent
* Hacks and some snippets: @akitaonrails

h2. Usable Things

h3. NERD Commenter

* *,cc* - Comment out the current line or text selected in visual mode.
* *,cm* - Comments the given lines using only one set of multipart delimiters.
* *,cu* - Uncomments the selected line(s).
* *,c<space>* - Toggles the comment state of the selected line(s). If the topmost selected
line is commented, all selected lines are uncommented and vice versa.
* *,c$* - Comments the current line from the cursor to the end of line.

h3. Surround

* Press *cs"'* (that's c, s, double quote, single quote) inside
  _"Hello world!"_
  to change it to
  _'Hello world!' _
* Now press *cs'<q>* to change it to
  _<q>Hello world!</q>_
* To go full circle, press *cst"* to get
  _"Hello world!"_
  To remove the delimiters entirely, press *ds"* .
  _Hello world!_
  Now with the cursor on "Hello", press *ysiw]* (*iw* is a text object).
  _[Hello] world!_
* Let's make that braces and add some space (use "}" instead of "{" for no space): *cs]{*
  _{ Hello } world!_
* Now wrap the entire line in parentheses with *yssb* or *yss)* .
  _({ Hello } world!)_
* Revert to the original text: *ds{ds)*
  _Hello world!_

h3. Walking through the splits

* Use *SHIFT-UP/DOWN/RIGHT/LEFT* for walking through splits in visual mode

h3. Transposing

* Use *CTRL-UP/DOWN* for moving current line or visual selection
* 5<C-Up> would move the current line (or visual selection) 5 lines up.

h3. Find&Replace

* The *:substitute* command searches for a text pattern, and replaces it with a text string.
* <code>:%s/foo/bar/g</code> Find each occurrence of 'foo', and replace it with 'bar'.
* <code>:%s/foo/bar/gc</code> Change each 'foo' to 'bar', but ask for confirmation first.
* <code>:%s/\<foo\>/bar/gc</code> Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.
* <code>:%s/foo/bar/gci</code> Change each 'foo' (case insensitive) to 'bar'; ask for confirmation.
* <code>:%s/foo/bar/gcI</code> Change each 'foo' (case sensitive) to 'bar'; ask for confirmation.
The *g* flag means global â€“ each occurrence in the line is changed, rather than just the first.
Search range:
* <code>:s/foo/bar/g</code> Change each 'foo' to 'bar' in the current line.
* <code>:%s/foo/bar/g</code> Change each 'foo' to 'bar' in all lines.
* <code>:5,12s/foo/bar/g</code> Change each 'foo' to 'bar' for all lines from line 5 to line 12 inclusive.
* <code>:'a,'bs/foo/bar/g</code> Change each 'foo' to 'bar' for all lines from mark a to mark b inclusive.
* <code>:.,$s/foo/bar/g</code> Change each 'foo' to 'bar' for all lines from the current line (.) to the last line ($) inclusive.
* <code>:.,+2s/foo/bar/g</code> Change each 'foo' to 'bar' for the current line (.) and the two next lines (+2).
* <code>:%s/foo/bar/g</code> Equivalent to :1,$s/foo/bar/g (change all lines).
* <code>:g/^baz/s/foo/bar/g</code> Change each 'foo' to 'bar' in each line starting with 'baz'.
When searching:
* *., *, \, [, ], ^, and $* are metacharacters.
* *+, ?, |, {, }, (, and )* must be escaped to use their special function.
* *\/* is / (use backslash + forward slash to search for forward slash)
* *\t* is tab, *\s* is whitespace
* *\n* is newline, *\r* is CR (carriage return = Ctrl-M = ^M)
* *\{#\}* is used for repetition. /foo.\{2\} will match foo and the two following characters. The \ is not required on the closing } so /foo.\{2} will do the same thing.
* *\(foo\)* makes a backreference to foo. Parenthesis without escapes are literally matched. Here the \ is required for the closing \).
When replacing:
* *\r* is newline, *\n* is a null byte (0x00).
* *\&* is ampersand (& is the text that matches the search pattern).
* *\1* inserts the text of the first backreference. *\2* inserts the second backreference, and so on.
* You can use other delimiters with substitute: <code>:s#http://www.example.com/index.html#http://example.com/#</code>
* Save typing by using *\zs* and *\ze* to set the start and end of a pattern. For example, instead of: <code>:s/Copyright 2007 All Rights Reserved/Copyright 2008 All Rights Reserved/</code> use: <code>:s/Copyright \zs2007\ze All Rights Reserved/2008/</code>

h3. Folding

* <code>:set foldenable</code> enable folding if it disable
* *zo* - open fold;
* *zO* - close folds recursively;
* *zc* - close fold;
* *zC* - close fold recursively;
* *za* - if fold opened - close, and vice versa;
* *zA* - same as *za*, but recursively;
* *zr* - decrease closed folds level (FOLDLEVEL+=1);
* *zR* - open all folds;
* *zm* - increase closed folds level (FOLDLEVEL-=1);
* *zM* - close all folds.

h3. Select to end of line

* *v SHIFT-4* in visual mode.

h3. AutoComplPop

* "AutoComplPop":http://www.vim.org/scripts/script.php?script_id=1879 - With this plugin, your vim comes to automatically opens popup menu for completions when you enter characters or move the cursor in Insert mode. It won't prevent you continuing entering characters.

h3. Rails.Vim

* <code>:Rextract {file}</code> - make a partial from visual selection.
* <code>:Rview</code> - go to *_view file_*.
* <code>:Rmodel</code> - go to *_model_*.
* <code>:Rcontroller</code> - go to *_controller_*.

h3. File convertation

* Convert from dos/unix to unix
** <code>:update</code> Save any changes.
** <code>:e ++ff=dos</code> Edit file again, using dos file format ('fileformats' is ignored).
** <code>:setlocal ff=unix</code> This buffer will use LF-only line endings when written.
** <code>:w</code> Write buffer using unix (LF-only) line endings.
** In the above, replacing <code>:set ff=unix</code> with <code>:set ff=mac</code> would write the file with mac (CR-only) line endings. Or, if it was a mac file to start with, you would use <code>:e ++ff=mac</code> to read the file correctly, so you could convert the line endings to unix or dos.

* Convert from dos/unix to dos
** <code>:update</code> Save any changes.
** <code>:e ++ff=dos</code> Edit file again, using dos file format ('fileformats' is ignored).
** <code>:w</code> Write buffer using dos (CRLF) line endings.

h3. Close all splits except active

* <code>:only</code>

h3. Close active tab with all splits

* <code>:tabclose</code>

h3. TagList

* "TagList":http://www.vim.org/scripts/script.php?script_id=273 - The "Tag List" plugin is a source code browser plugin for Vim and provides an overview of the structure of source code files and allows you to efficiently browse through source code files for different programming languages.
** <code>:TlistToggle</code> - command to open/close the taglist window.

h3. Unite tabs in splits and vice versa

* <code>:sball</code>, <code>:sb</code> - Split all buffers;
* <code>:tab ball</code> - vice versa.
